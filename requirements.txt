requirements:

1. variable can store dynamic data type and dynamic value, variable can inferred data type from value, value of variable can be reassign with different data type
```javascript
let something = 123;
console.log("something: ", something);
something = "foo";
console.log("something: ", something);
something = true;
console.log("something: ", something);
something = null;
console.log("something: ", something);
something = [1, 2, 3];
console.log("something: ", something);
something = { "foo": "bar" };
console.log("something: ", something);
```

2. has option to make variable can store dynamic data type and dynamic value
```go
type Any interface{}
```

3. object/dictionary/associative-array/hash/hashmap/map/unordered-list-key-value-pair-data-structure can store dynamic data type and dynamic value
```javascript
const myObject = {
    "my_string": "foo",
    "my_number": 123,
    "my_bool": true,
    "my_null": null,
    "my_object": {
        "foo": "bar"
    },
    "my_array": [1, 2, 3],
};
console.log("myObject: ", myObject);
```

4. array/list/slice/ordered-list-data-structure can store dynamic data type and dynamic value
```javascript
const myArray = ["foo", 123, true, null, [1, 2, 3], { "foo": "bar" }];
console.log("myArray: ", myArray);
```

5. support passing functions as arguments to other functions
```javascript
function sayHello(callbackFunction) {
    console.log("hello");
    callbackFunction();
}
function sayHowAreYou() {
    console.log("how are you?");
}
sayHello(sayHowAreYou);
sayHello(function () {
    console.log("how are you?");
});
```

6. support returning functions as values from other functions
```javascript
function multiply(a) {
    return function (b) {
        return a * b;
    };
}
const multiplyBy2 = multiply(2);
const multiplyBy2Result = multiplyBy2(10); // 20
console.log("multiplyBy2Result: ", multiplyBy2Result);
```

7. support assigning functions to variables
```javascript
const getRectangleArea = function (rectangleWidth, rectangleLength) {
    return rectangleWidth * rectangleLength;
};
console.log("getRectangleArea(3, 4): ", getRectangleArea(3, 4));;
```

8. support storing functions in data structures like array/list/slice/ordered-list-data-structure or object/dictionary/associative-array/hash/hashmap/map/unordered-list-key-value-pair-data-structure
```javascript
const myArray2 = [
    function (a, b) {
        return a * b;
    },
    "foo",
    123,
    true,
    null
    [1, 2, 3],
    { "foo": "bar" },
];
console.log("myArray2[0](3, 4): ", myArray2[0](3, 4));

const myObject2 = {
    "my_function": function (a, b) {
        return a * b;
    },
    "my_string": "foo",
    "my_number": 123,
    "my_bool": true,
    "my_null": null,
    "my_object": {
        "foo": "bar"
    },
    "my_array": [1, 2, 3],
}
console.log("myObject2.my_function(7, 5): ", myObject2.my_function(7, 5));
```
