in go "&" is to make a pointer of a variable (copy by reference)
and "*" is to access the value where the variable pointed to

for example:
a := 5
b := &a
fmt.Println(&a) // 0xc000012028
fmt.Println(b) // 0xc000012028
fmt.Println(*b) // 5

to create module ("go.mod" file):
go mod init modulename
add path to go.work

to create workspace ("go.work" file):
go work init

numeric data types in Go:
Int
Int8
Int16
Int32
Int64
Uint
Uint8
Uint16
Uint32
Uint64
Float32
Float64
Complex64
Complex128

isLikeJsError := func(restArguments ...interface{}) interface{} {
    anything := restArguments[0]
    switch anything.(type) {
    case error:
        return true
    default:
        return false
    }
}
isLikeJsError2 := func(restArguments ...interface{}) interface{} {
    anything := restArguments[0]
    if _, ok := anything.(error); ok {
        return true
    } else {
        return false
    }
}

interface{}(
.(func(...interface{}) interface{}))
) == 
(ternary
 = ((
= (
result.(string))

.(func(...interface{}) interface{}))
var x interface{} = restArguments[0]
x interface{}
range (anyArray.([]interface{}))
