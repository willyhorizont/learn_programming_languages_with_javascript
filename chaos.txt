\n\n$ regex to find multiple line whitepace at the end of the file

done:
array.length
get object by key
change object by key
delete object by key
computed property names
object_keys
object_values
object_entries

langs not review want try:
groovy
f#
crystal
java
c3
elixir
clojure
onyx
lobster
alpaca
red
pony
reason
haskell
elm
commom lisp
scheme
erlang
lisp
clojure
racket
ocaml
roc
gleam
unison

TODO:
check custom optional_chaining function, replace it with error handling if possible
change function declaration to function expression if possible
change function declaration to function expression if possible (Perl)
check everything in each language
replace ".." to " .. " in *.pl
create IIFE.*
check jsonstringify in *.*
check 006_arrays.*
check 005_objects.*
check chaos.txt for more

working on mid way:
string_interpolation.*
function_variadic_rest_arguments.*
console_log.*
006_arrays.*
function_optional_argument_default_argument_value.*
json_stringify.*
get_type.*
005_objects.*
function_iife.*
004_loops.*
generate_number_sequence.*
variables_and_scopes.*
object_from_entries.*
function_pipe.*
array_entries.*

todo in js flavour langs repo:
add jsLikeType to getType
update optional_chaining handle function call
rename objectPropertiesArray to arrayIndexOrObjectKeyArray
refactor Go files and folder structures
simultaneously {
    create string_interpolation.*
    create function_variadic_rest_arguments.*, rename arguments to rest arguments
    create console_log.* in *.* especially in PHP, change sprint to console_log
    refactor 006_arrays.*, iterate over and print each item and index
    create function_optional_argument_default_argument_value.*
    create json_stringify.* optional argument default argument value
    create get_type.*
    refactor 005_objects.*, iterate over and print each key-value pair and object entry / iteration index
    create function_iife.*
    refactor 004_loops.* encapsulate loops inside iife
    create generate_number_sequence.*
    create variables_and_scopes.*
    create object_from_entries.*
    create function_pipe.*
    create array_entries.*
}
change number to any_number especially in factorial.*, fizzbuzz.*
check console.log(`multiplyBy2(10): ${multiplyBy2Result}`); in yyy_required_features.*
truncate the decimal part in .* function_pipe.*
deep_clone
array_keys, array_values, array_join, array_slice, array_push, array_splice, array_reverse, array_sort, array_fill,
array_to_reversed, array_to_sorted, array_to_spliced, array_from, array_shift, array_unshift, array_toString,
string, number, json_parse, string_interpolation
create spread_object and spread_array function using object_entries and object_from_entries, especially in *.go
isAnagram
generateAnagram
hello world waterfall
rectangle
triangle
pyramid
palindrome
spread string
climbing_stairs
fibonacci_sequence
prime_sequence

tonotdo in js flavour langs repo:
array_for_each, array_concat, array_copy_within, array_flat, array_flat_map, array_reduce_right, array_find_last, array_find_last_index,
array_with, array_of, array_pop, array_from_async, array_last_index_of, array_is_array, array_index_of

Agda
BF
C
CFML
Clojure
COBOL
CoffeeScript
CommonLisp
Coq
C++
Crystal
C#
D
Dart
Elixir
Elm
Erlang
Factor
Forth
Fortran
F#
Go
Groovy
Haskell
Haxe
Idris
Java
JavaScript
Julia
Kotlin
λ Calculus
Lean
Lua
NASM
Nim
Objective-C
OCaml
Pascal
Perl
PHP
PowerShell
Prolog
PureScript
Python
R
Racket
Raku
Reason
RISC-V
Ruby
Rust
Scala
Shell
Solidity
SQL
Swift
TypeScript
VB

[...array1, ...array2]
{ ...object1, ...object2 }
[...array1, array2] || [...array1, newArrayItem1, newArrayItem2]
[...array1, object1] || [...array1, newArrayItem1, newArrayItem2]
{ ...object1, object2 } || { ...object1, objectKey: objectValue }
{ ...object1, array2 } || { ...object1, objectKey: objectValue }
{ ...object1, ...array2 }
[...array1, ...object1] // this combination throw an error in JavaScript

const asd = "Hello World";
console.log([...asd]);

if [a-zA-Z0-9_]+
if [a-zA-Z0-9_. ]+[()]?[=><!~]+ [a-zA-Z0-9_ ]+
if [a-zA-Z0-9_. ]+[a-zA-Z0-9_(), .]?[=><!~]+ [a-zA-Z0-9_ ]+

\b[a-z]+(?:[A-Z][a-z]*)+\b
^[a-z]+
\b[a-z]\w*\b

(?<!")\\n"

regex to find `\n` without `;` before it:
(?<!;)\n

(?<!::Any) = 
::[a-z_]+::[a-zA-Z_]+
\b[a-z0-9_]+(?= = )(?!::Any)

Safe Navigation Operator
In Ruby 2.3 and later, the safe navigation operator &.
user = nil
puts user&.name  # Output: nil (no error is raised)

Binary Tree
Binary Search Tree
Heap
Trie
Priority Queue
Deque
Matrix
Sparse Matrix
Skip List
Segment Tree
Fenwick Tree (Binary Indexed Tree)
Red-Black Tree
AVL Tree
B-Tree
B+ Tree
Bloom Filter
Suffix Tree
Disjoint Set (Union-Find)
Circular Buffer
XOR Linked List
Ternary Search Tree
Patricia Tree (Radix Tree)

ArrayList/Slice
Hash Table/Dictionary/Map
Array
Set
Linked List
Stack
Queue
Graph
Tree
